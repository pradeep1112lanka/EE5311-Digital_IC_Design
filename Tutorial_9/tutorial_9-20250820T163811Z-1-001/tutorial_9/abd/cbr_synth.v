/* Generated by Yosys 0.51+107 (git sha1 f03b44959, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module bypass(A, B, p);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  input [3:0] A;
  wire [3:0] A;
  input [3:0] B;
  wire [3:0] B;
  output p;
  wire p;
  sky130_fd_sc_hd__xnor2_1 _19_ (
    .A(_11_),
    .B(_07_),
    .Y(_14_)
  );
  sky130_fd_sc_hd__xnor2_1 _20_ (
    .A(_10_),
    .B(_06_),
    .Y(_15_)
  );
  sky130_fd_sc_hd__xnor2_1 _21_ (
    .A(_13_),
    .B(_09_),
    .Y(_16_)
  );
  sky130_fd_sc_hd__xnor2_1 _22_ (
    .A(_12_),
    .B(_08_),
    .Y(_17_)
  );
  sky130_fd_sc_hd__nor4_1 _23_ (
    .A(_14_),
    .B(_15_),
    .C(_16_),
    .D(_17_),
    .Y(_18_)
  );
  assign _10_ = B[0];
  assign _06_ = A[0];
  assign _11_ = B[1];
  assign _07_ = A[1];
  assign _12_ = B[2];
  assign _08_ = A[2];
  assign _13_ = B[3];
  assign _09_ = A[3];
  assign p = _18_;
endmodule

module carrybypass(A, B, Cin, Cout, S);
  input [15:0] A;
  wire [15:0] A;
  input [15:0] B;
  wire [15:0] B;
  input Cin;
  wire Cin;
  output Cout;
  wire Cout;
  output [15:0] S;
  wire [15:0] S;
  wire [3:0] c;
  cbp4bit cbp0 (
    .A(A[3:0]),
    .B(B[3:0]),
    .Cin(Cin),
    .Cout(c[0]),
    .S(S[3:0])
  );
  cbp4bit cbp1 (
    .A(A[7:4]),
    .B(B[7:4]),
    .Cin(c[0]),
    .Cout(c[1]),
    .S(S[7:4])
  );
  cbp4bit cbp2 (
    .A(A[11:8]),
    .B(B[11:8]),
    .Cin(c[1]),
    .Cout(c[2]),
    .S(S[11:8])
  );
  cbp4bit cbp3 (
    .A(A[15:12]),
    .B(B[15:12]),
    .Cin(c[2]),
    .Cout(Cout),
    .S(S[15:12])
  );
  assign c[3] = Cout;
endmodule

module carrybypass_reg(clk, A_in, B_in, Cin_in, S_out, Cout_out);
  input [15:0] A_in;
  wire [15:0] A_in;
  wire [15:0] A_reg;
  input [15:0] B_in;
  wire [15:0] B_in;
  wire [15:0] B_reg;
  input Cin_in;
  wire Cin_in;
  wire Cin_reg;
  output Cout_out;
  wire Cout_out;
  wire Cout_wire;
  output [15:0] S_out;
  wire [15:0] S_out;
  wire [15:0] S_wire;
  input clk;
  wire clk;
  sky130_fd_sc_hd__dfxtp_1 _00_ (
    .CLK(clk),
    .D(S_wire[0]),
    .Q(S_out[0])
  );
  sky130_fd_sc_hd__dfxtp_1 _01_ (
    .CLK(clk),
    .D(S_wire[1]),
    .Q(S_out[1])
  );
  sky130_fd_sc_hd__dfxtp_1 _02_ (
    .CLK(clk),
    .D(S_wire[2]),
    .Q(S_out[2])
  );
  sky130_fd_sc_hd__dfxtp_1 _03_ (
    .CLK(clk),
    .D(S_wire[3]),
    .Q(S_out[3])
  );
  sky130_fd_sc_hd__dfxtp_1 _04_ (
    .CLK(clk),
    .D(S_wire[4]),
    .Q(S_out[4])
  );
  sky130_fd_sc_hd__dfxtp_1 _05_ (
    .CLK(clk),
    .D(S_wire[5]),
    .Q(S_out[5])
  );
  sky130_fd_sc_hd__dfxtp_1 _06_ (
    .CLK(clk),
    .D(S_wire[6]),
    .Q(S_out[6])
  );
  sky130_fd_sc_hd__dfxtp_1 _07_ (
    .CLK(clk),
    .D(S_wire[7]),
    .Q(S_out[7])
  );
  sky130_fd_sc_hd__dfxtp_1 _08_ (
    .CLK(clk),
    .D(S_wire[8]),
    .Q(S_out[8])
  );
  sky130_fd_sc_hd__dfxtp_1 _09_ (
    .CLK(clk),
    .D(S_wire[9]),
    .Q(S_out[9])
  );
  sky130_fd_sc_hd__dfxtp_1 _10_ (
    .CLK(clk),
    .D(S_wire[10]),
    .Q(S_out[10])
  );
  sky130_fd_sc_hd__dfxtp_1 _11_ (
    .CLK(clk),
    .D(S_wire[11]),
    .Q(S_out[11])
  );
  sky130_fd_sc_hd__dfxtp_1 _12_ (
    .CLK(clk),
    .D(S_wire[12]),
    .Q(S_out[12])
  );
  sky130_fd_sc_hd__dfxtp_1 _13_ (
    .CLK(clk),
    .D(S_wire[13]),
    .Q(S_out[13])
  );
  sky130_fd_sc_hd__dfxtp_1 _14_ (
    .CLK(clk),
    .D(S_wire[14]),
    .Q(S_out[14])
  );
  sky130_fd_sc_hd__dfxtp_1 _15_ (
    .CLK(clk),
    .D(S_wire[15]),
    .Q(S_out[15])
  );
  sky130_fd_sc_hd__dfxtp_1 _16_ (
    .CLK(clk),
    .D(Cout_wire),
    .Q(Cout_out)
  );
  sky130_fd_sc_hd__dfxtp_1 _17_ (
    .CLK(clk),
    .D(A_in[0]),
    .Q(A_reg[0])
  );
  sky130_fd_sc_hd__dfxtp_1 _18_ (
    .CLK(clk),
    .D(A_in[1]),
    .Q(A_reg[1])
  );
  sky130_fd_sc_hd__dfxtp_1 _19_ (
    .CLK(clk),
    .D(A_in[2]),
    .Q(A_reg[2])
  );
  sky130_fd_sc_hd__dfxtp_1 _20_ (
    .CLK(clk),
    .D(A_in[3]),
    .Q(A_reg[3])
  );
  sky130_fd_sc_hd__dfxtp_1 _21_ (
    .CLK(clk),
    .D(A_in[4]),
    .Q(A_reg[4])
  );
  sky130_fd_sc_hd__dfxtp_1 _22_ (
    .CLK(clk),
    .D(A_in[5]),
    .Q(A_reg[5])
  );
  sky130_fd_sc_hd__dfxtp_1 _23_ (
    .CLK(clk),
    .D(A_in[6]),
    .Q(A_reg[6])
  );
  sky130_fd_sc_hd__dfxtp_1 _24_ (
    .CLK(clk),
    .D(A_in[7]),
    .Q(A_reg[7])
  );
  sky130_fd_sc_hd__dfxtp_1 _25_ (
    .CLK(clk),
    .D(A_in[8]),
    .Q(A_reg[8])
  );
  sky130_fd_sc_hd__dfxtp_1 _26_ (
    .CLK(clk),
    .D(A_in[9]),
    .Q(A_reg[9])
  );
  sky130_fd_sc_hd__dfxtp_1 _27_ (
    .CLK(clk),
    .D(A_in[10]),
    .Q(A_reg[10])
  );
  sky130_fd_sc_hd__dfxtp_1 _28_ (
    .CLK(clk),
    .D(A_in[11]),
    .Q(A_reg[11])
  );
  sky130_fd_sc_hd__dfxtp_1 _29_ (
    .CLK(clk),
    .D(A_in[12]),
    .Q(A_reg[12])
  );
  sky130_fd_sc_hd__dfxtp_1 _30_ (
    .CLK(clk),
    .D(A_in[13]),
    .Q(A_reg[13])
  );
  sky130_fd_sc_hd__dfxtp_1 _31_ (
    .CLK(clk),
    .D(A_in[14]),
    .Q(A_reg[14])
  );
  sky130_fd_sc_hd__dfxtp_1 _32_ (
    .CLK(clk),
    .D(A_in[15]),
    .Q(A_reg[15])
  );
  sky130_fd_sc_hd__dfxtp_1 _33_ (
    .CLK(clk),
    .D(B_in[0]),
    .Q(B_reg[0])
  );
  sky130_fd_sc_hd__dfxtp_1 _34_ (
    .CLK(clk),
    .D(B_in[1]),
    .Q(B_reg[1])
  );
  sky130_fd_sc_hd__dfxtp_1 _35_ (
    .CLK(clk),
    .D(B_in[2]),
    .Q(B_reg[2])
  );
  sky130_fd_sc_hd__dfxtp_1 _36_ (
    .CLK(clk),
    .D(B_in[3]),
    .Q(B_reg[3])
  );
  sky130_fd_sc_hd__dfxtp_1 _37_ (
    .CLK(clk),
    .D(B_in[4]),
    .Q(B_reg[4])
  );
  sky130_fd_sc_hd__dfxtp_1 _38_ (
    .CLK(clk),
    .D(B_in[5]),
    .Q(B_reg[5])
  );
  sky130_fd_sc_hd__dfxtp_1 _39_ (
    .CLK(clk),
    .D(B_in[6]),
    .Q(B_reg[6])
  );
  sky130_fd_sc_hd__dfxtp_1 _40_ (
    .CLK(clk),
    .D(B_in[7]),
    .Q(B_reg[7])
  );
  sky130_fd_sc_hd__dfxtp_1 _41_ (
    .CLK(clk),
    .D(B_in[8]),
    .Q(B_reg[8])
  );
  sky130_fd_sc_hd__dfxtp_1 _42_ (
    .CLK(clk),
    .D(B_in[9]),
    .Q(B_reg[9])
  );
  sky130_fd_sc_hd__dfxtp_1 _43_ (
    .CLK(clk),
    .D(B_in[10]),
    .Q(B_reg[10])
  );
  sky130_fd_sc_hd__dfxtp_1 _44_ (
    .CLK(clk),
    .D(B_in[11]),
    .Q(B_reg[11])
  );
  sky130_fd_sc_hd__dfxtp_1 _45_ (
    .CLK(clk),
    .D(B_in[12]),
    .Q(B_reg[12])
  );
  sky130_fd_sc_hd__dfxtp_1 _46_ (
    .CLK(clk),
    .D(B_in[13]),
    .Q(B_reg[13])
  );
  sky130_fd_sc_hd__dfxtp_1 _47_ (
    .CLK(clk),
    .D(B_in[14]),
    .Q(B_reg[14])
  );
  sky130_fd_sc_hd__dfxtp_1 _48_ (
    .CLK(clk),
    .D(B_in[15]),
    .Q(B_reg[15])
  );
  sky130_fd_sc_hd__dfxtp_1 _49_ (
    .CLK(clk),
    .D(Cin_in),
    .Q(Cin_reg)
  );
  carrybypass cb_adder (
    .A(A_reg),
    .B(B_reg),
    .Cin(Cin_reg),
    .Cout(Cout_wire),
    .S(S_wire)
  );
endmodule

module cbp4bit(A, B, Cin, Cout, S);
  input [3:0] A;
  wire [3:0] A;
  input [3:0] B;
  wire [3:0] B;
  wire [4:0] C;
  input Cin;
  wire Cin;
  output Cout;
  wire Cout;
  output [3:0] S;
  wire [3:0] S;
  wire q;
  wire r;
  bypass by0 (
    .A(A),
    .B(B),
    .p(q)
  );
  fulladdr fa0 (
    .Sum(S[0]),
    .a(A[0]),
    .b(B[0]),
    .cin(Cin),
    .cout(C[1])
  );
  fulladdr fa1 (
    .Sum(S[1]),
    .a(A[1]),
    .b(B[1]),
    .cin(C[1]),
    .cout(C[2])
  );
  fulladdr fa2 (
    .Sum(S[2]),
    .a(A[2]),
    .b(B[2]),
    .cin(C[2]),
    .cout(C[3])
  );
  fulladdr fa3 (
    .Sum(S[3]),
    .a(A[3]),
    .b(B[3]),
    .cin(C[3]),
    .cout(C[4])
  );
  mux21 mu0 (
    .i0(C[4]),
    .i1(Cin),
    .o(r),
    .sel(q)
  );
  assign C[0] = Cin;
  assign Cout = r;
endmodule

module fulladdr(a, b, cin, cout, Sum);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  output Sum;
  wire Sum;
  input a;
  wire a;
  input b;
  wire b;
  input cin;
  wire cin;
  output cout;
  wire cout;
  sky130_fd_sc_hd__maj3_1 _10_ (
    .A(_06_),
    .B(_07_),
    .C(_08_),
    .X(_09_)
  );
  sky130_fd_sc_hd__xor3_1 _11_ (
    .A(_06_),
    .B(_07_),
    .C(_08_),
    .X(_05_)
  );
  assign _06_ = a;
  assign _07_ = b;
  assign _08_ = cin;
  assign cout = _09_;
  assign Sum = _05_;
endmodule

module mux21(i0, i1, sel, o);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  input i0;
  wire i0;
  input i1;
  wire i1;
  output o;
  wire o;
  input sel;
  wire sel;
  sky130_fd_sc_hd__mux2_1 _4_ (
    .A0(_0_),
    .A1(_1_),
    .S(_3_),
    .X(_2_)
  );
  assign _0_ = i0;
  assign _1_ = i1;
  assign _3_ = sel;
  assign o = _2_;
endmodule
